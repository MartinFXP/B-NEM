%% LyX 2.1.4 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@


\title{Boolean Nested Effects Models\\
	Inferring the logical signalling of pathways from indirect measurements and perturbation biology}


\author{Martin Pirkl}

\maketitle
Boolean Nested effects Models (B-NEM) are used to infer signalling pathways. In different experiments (conditions) members of a pathway (S-genes) are stimulated or inhibited, alone and in combination. In each experiment transcriptional targets (E-genes) of the pathway react differently and are higher or lower expressed depending on the condition. From these differential expression B-NEM infers Boolean functions presented as hyper-edges of a hyper-graph connecting parents and children in the pathway. For example if the signal is transducted by two parents A and B to a child C and the signal can be blocked with a knock-down of either one, they are connected by a typical AND-gate. If the signal is still transduced during a single knock-down, but blocked by the double knock-down of A and B, they activate C by an OR-gate. In general the state of child C is defined by a Boolean function
\[f: \left\{0,1\right\}^n \to \left\{0,1\right\},~C = f(A_1,\dots,A_n)\]
 with its parents $A_i, i \in \left\{1,\dots,n\right\}$.

\section*{Loading B-NEM}

<<installandload>>=
X11.options(type="Xlib")

## install.packages("bnem_1.0.tar.gz")

install.packages("devtools")

library(devtools)

install_github("MartinFXP/B-NEM/package", force = T)

library(bnem)
@

\section*{Toy example for DAG}
We show how to use B-NEM on a toy pathway presented by a directed
acyclic (hyper-)graph (DAG). B-NEM demands several objects as
input. The two main objects are the differential gene expression
(data) and prior knowledge respectively the search space.

First we create a prior knowledge network (PKN). The PKN will have two
S-genes without parents. We define these as stimuli, which means they
are set to $1$ in experiments, where they are stimulated and $0$
otherwise. All other down-stream S-genes have the potential to be
inhibited $(0)$. If they are not inhibited their state is calculated
according to their parents' state and a given Boolean function.

<<createpkn>>=
set.seed(2579)
## alternative seed and also a great song:
## set.seed(9247)

## to get the while loop started,
## which makes sure we get a PKN with exactly two stimuli (or what the amount you want):
stimuli <- "dummy"

while(length(stimuli) != 2) {

## random Boolean graph without cycles,
## maximal 25 edges, maximal edge size of 1 (normal graph) and maximal 10 S-genes:
  dnf <- randomDnf(10, max.edges = 25, max.edge.size = 1, dag = T)

## all S-genes:
  cues <- sort(unique(gsub("!", "", unlist(strsplit(unlist(strsplit(dnf, "=")), "\\+")))))

## parents:
  inputs <- unique(unlist(strsplit(gsub("!", "", gsub("=.*", "", dnf)), "=")))

## children:
  outputs <- unique(gsub(".*=", "", dnf))

## parents which are no children are stimuli:
  stimuli <- inputs[which(!(inputs %in% outputs))]

}

inhibitors <- unique(c(inputs, outputs))
## S-genes which are no stimuli are inhibitors
inhibitors <- inhibitors[-which(inhibitors %in% stimuli)]
@
The following figure shows the PKN. Red "tee" arrows depict repression the others activation of the child. The stimulated S-genes are diamond shaped.
<<plotpkn, fig.width=4, fig.height=4, out.width='0.4\\linewidth'>>=
plotDnf(dnf, stimuli = stimuli)
@
In the next step we convert the dnf object into a PKN object and
extend it to a Boolean hyper-graph, which represents an apriori restricted search space of Boolean networks.
<<pknextend>>=
sifMatrix <- NULL

for (i in dnf) {
  inputs2 <- unique(unlist(strsplit(gsub("=.*", "", i), "=")))
  output <- unique(gsub(".*=", "", i))
  for (j in inputs2) {
    j2 <- gsub("!", "", j)
    if (j %in% j2) {
      sifMatrix <- rbind(sifMatrix, c(j, 1, output))
    } else {
      sifMatrix <- rbind(sifMatrix, c(j2, -1, output))
    }
  }
}
write.table(sifMatrix, file = "temp.sif", sep = "\t",
            row.names = FALSE, col.names = FALSE, quote = FALSE)
PKN <- readSIF("temp.sif")
## unlink("temp.sif")

## create metainformation (which S-genes are perturbed in which experiments):
CNOlist <- dummyCNOlist(stimuli = stimuli, inhibitors = inhibitors,
                        maxStim = 2, maxInhibit = 1, signals = NULL)

## extend the model:
model <- preprocessing(CNOlist, PKN, maxInputsPerGate=100)
@
We suggest to take a look at the sif file. In future analyses it is easier to just provide a suitable sif file for the investigated pathway.

In an real application the underlaying ground truth network (GTN) is
not known. However in our toy example we define one.
<<definegtn>>=
## define a bitstring denoting the present and absent edges:
bString <- absorption(sample(c(0,1), length(model$reacID), replace = T), model)

## simulate S-gene states for all possible conditions:
steadyState <- steadyState2 <- simulateStatesRecursive(CNOlist, model, bString)

## we find constitutively active S-genes with the following (the are boring, so we avoid them):
ind <- grep(paste(inhibitors, collapse = "|"), colnames(steadyState2))
steadyState2[, ind] <- steadyState2[, ind] + CNOlist@inhibitors

## this while loop makes sure we get a gtn,
## which actually affects all vertices
## and no vertices are constitutively active:
while(any(apply(steadyState, 2, sd) == 0) | any(apply(steadyState2, 2, sd) == 0)) {

  bString <- absorption(sample(c(0,1), length(model$reacID), replace = T), model)

  steadyState <- steadyState2 <- simulateStatesRecursive(CNOlist, model, bString)

  ind <- grep(paste(inhibitors, collapse = "|"), colnames(steadyState2))
  steadyState2[, ind] <- steadyState2[, ind] + CNOlist@inhibitors

}
@
The following figure shows our random GTN, which is a subset of the
hyper-graph representing the apriori restricted search space.
<<plotgtn, fig.width=4, fig.height=4, out.width='0.4\\linewidth'>>=
plotDnf(model$reacID[as.logical(bString)], stimuli = stimuli)
@
We use this GTN to simulate data.
<<datasim>>=
## the expression data with 10 E-genes for each S-gene and 3 replicates:
exprs <- t(steadyState)[rep(1:ncol(steadyState), 10), rep(1:nrow(steadyState), 3)]

## we calculate the foldchanges (expected S-gene response scheme, ERS)
## between certain condtions (e.g. control vs stimulation):
ERS <- computeFc(CNOlist, t(steadyState))

# the next step reduces the ERS to a sensible set of comparisons;
## e.g. we do not want to compare stimuli vs inhibition, but stimuli vs (stimuli,inhibition):
stimcomb <- apply(expand.grid(stimuli, stimuli), c(1,2), as.character)
stimuli.pairs <- apply(stimcomb, 1, paste, collapse = "_")

## this is the usual setup,
## but "computeFc" calculates a lot more contrasts, which can also be used, if preferred:
ind <- grep(paste(c(paste("Ctrl_vs_", c(stimuli, inhibitors), sep = ""),
                    paste(stimuli, "_vs_", stimuli, "_", rep(inhibitors, each = length(stimuli)), sep = ""),
                    paste(stimuli.pairs, "_vs_", stimuli.pairs, "_", rep(inhibitors, each = length(stimuli.pairs)), sep = "")),
                  collapse = "|"), colnames(ERS))
ERS <- ERS[, ind]

## same as before with the expression values, we have 10 E-genes each and 3 replicates:
fc <- ERS[rep(1:nrow(ERS), 10), rep(1:ncol(ERS), 3)]

## we add some Gaussian noise:
fc <- fc + rnorm(length(fc), 0, 1)

## in real applications some E-genes are negatively regulated, hence we flip some foldchanges:
flip <- sample(1:nrow(fc), floor(0.33*row(fc)))
fc[flip, ] <- fc[flip, ]*(-1)

## don't forget to set rownames (usually gene symbols, ensemble ids, entrez ids, ...)
rownames(fc) <- paste(rownames(fc), 1:nrow(fc), sep = "_")
print(fc[1:6, c(1:3,(ncol(fc)-2):ncol(fc))])
@
B-NEM uses differential expression between experiments to infer the
pathway logics. For example look at the colnames of fc (=foldchanges
of E-genes (rows)) and remember that \Sexpr{stimuli} are our
stimulated S-genes and the rest possibly inhibited. Thus in the first
column of fc we have the contrast \Sexpr{gsub(".*_", "", colnames(fc)[1])} $-$ control. In the control no S-genes are perturbed.

We search for the GTN in our restricted network space. Each network is a sub-graph of the full hyper-graph model\$reacID. We initialise the search with a starting network and greedily search the neighbourhood.

<<localsearch>>=
## we start with the empty graph:
initBstring <- reduceGraph(rep(0, length(model$reacID)), model, CNOlist)
## initBstring <- reduceGraph(rep(1, length(model$reacID)), model, CNOlist) ## fully connected normal graph

## paralellize for several threads on one machine or multiple machines
## see package "snowfall" for details
parallel <- 2
## parallel <- list(c(4,16,8,2), c("machine1", "machine2", "machine3", "machine4")) # distribute 30 threads on four machines

## greedy search:
greedy <- bnem(search = "greedy",
            fc=fc,
            exprs=exprs, # not used, if fc is defined
            CNOlist=CNOlist,
            model=model,
            parallel=parallel,
            initBstring=initBstring,
            draw = FALSE, # TRUE: draw network at each step
            verbose = FALSE, # TRUE: print changed (hyper-)edges and score improvement
            maxSteps = Inf
            )

resString <- greedy$bString
@
We take a look at the efficiency of the search algorithm with
sensitivity and specificity of the hyper-eges for the optimized network and the accuracy of its ERS (similar to the truth table). Since several networks produce the same ERS, the found hyper-graph can differ from the GTN and still be $100\%$ accurate.
<<plotresult, fig.width=4, fig.height=4, out.width='0.4\\linewidth'>>=
par(mfrow=c(1,2))

## GTN:
plotDnf(model$reacID[as.logical(bString)], main = "GTN", stimuli = stimuli)

## greedy optimum:
plotDnf(model$reacID[as.logical(resString)], main = "greedy optimum", stimuli = stimuli)
@
<<accuracy>>=
## hyper-edge sensitivity and specificity:
print(sum(bString == 1 & resString == 1)/
      (sum(bString == 1 & resString == 1) + sum(bString == 1 & resString == 0)))
print(sum(bString == 0 & resString == 0)/
      (sum(bString == 0 & resString == 0) + sum(bString == 0 & resString == 1)))

## accuracy of the expected response scheme (can be high even, if the networks differ):
ERS.res <- computeFc(CNOlist, t(simulateStatesRecursive(CNOlist, model, resString)))
ERS.res <- ERS.res[, which(colnames(ERS.res) %in% colnames(ERS))]
print(sum(ERS.res == ERS)/length(ERS))
@
In our seeded example 2574 the optimum network is indeed the GTN. If
you set the alternative seed at the beginning, neither the network nor
the correct ERS is found, if we initialise the search with the empty
network. If we start with the fully connected normal graph, the ERS is
resolved a $100$\%, while the greedy optimum still differs from the
GTN. Thus the GTN and the greedy optimum are equivalent, but the GTN
is larger (more outgoing edges) and thus not preferred.

After optimization we look at the data and how well the greedy optimum
explains the E-genes. The lower the score the better the fit.

<<visualfit, fig.width=20, fig.height=10, out.width='1.0\\linewidth'>>=
fitinfo <- validateGraph(CNOlist, fc=fc, exprs=exprs, model = model, bString = resString,
                         Sgene = 1, Egenes = 1000, cexRow = 0.8, cexCol = 0.7, xrot = 45,
                         Colv = T, Rowv = T, dendrogram = "both", bordercol = "lightgrey",
                         aspect = "iso", sub = "")
@

The bottom row shows the ERS of S-gene
\Sexpr{colnames(CNOlist@signals[[1]])[1]} and the other rows show the
observed response scheme (ORS) of the
\Sexpr{colnames(CNOlist@signals[[1]])[1]}-regulated E-genes. Even
though the Gaussian noise makes the data look almost random, the
greedy optimum is equal to the GTN.
Alternatively to the greedy neighbourhood search a genetic algorithm
and exhaustive search are available. The exhaustive search is not recommended for search spaces with more than 20 hyper-edges.


<<ga>>=
## genetic algorithm:
genetic <- bnem(search = "genetic",
           fc=fc,
           exprs=exprs,
           parallel = parallel,
           CNOlist=CNOlist,
           model=model,
           initBstring=initBstring,
           popSize = 10,
           stallGenMax = 10,
           graph = FALSE,
           verbose = FALSE
           )

resString <- genetic$bString
@
<<exhaustive>>=
## ## exhaustive search:
## exhaustive <- bnem(search = "exhaustive",
##            parallel = parallel,
##            CNOlist=CNOlist,
##            fc=fc,
##            exprs=exprs,
##            model=model
##            )

## resString <- exRun$bString
@

\section*{Stimulated and inhibited S-genes can overlap}
In this section we show how to use B-NEM, if stimuli and inhibitors
overlap. Additionally we want to show that B-NEM can resolve cycles. For this we allow the PKN to have cycles, but no repression, because repression can lead to an unresolvable ERS. See Pirkl et al., 2016 for details.

<<createpkn2>>=
## we do not force a DAG but do not allow repression:
dnf <- randomDnf(10, max.edges = 25, max.edge.size = 1, dag = F, negation = F)
cues <- sort(unique(gsub("!", "", unlist(strsplit(unlist(strsplit(dnf, "=")), "\\+")))))
inputs <- unique(unlist(strsplit(gsub("!", "", gsub("=.*", "", dnf)), "=")))
outputs <- unique(gsub(".*=", "", dnf))
stimuli <- c(inputs[which(!(inputs %in% outputs))], cues[sample(1:length(cues), 2)])
inhibitors <- cues
@

We look for stimuli which are also inhibited. For those we add additional stimuli S-genes. The stimuli S-gene (parent) and the inhibitor S-gene (child) are connected by a positive edge.

<<addstimuli>>=
both <- stimuli[which(stimuli %in% inhibitors)]
for (i in both) {
  dnf <- gsub(i, paste(i, "inhibit", sep = ""), dnf)
  dnf <- c(dnf, paste(i, "stim=", i, "inhibit", sep = ""))
  stimuli <- gsub(i, paste(i, "stim", sep = ""), stimuli)
  inhibitors  <- gsub(i, paste(i, "inhibit", sep = ""), inhibitors)
}
@

The next figure shows the cyclic PKN with extra stimuli S-genes. Notice, this way the inhibition of the S-genes overrules the stimulation.

<<plotpkn2, fig.width=6, fig.height=6, out.width='0.6\\linewidth'>>=
plotDnf(dnf, stimuli = stimuli)
@

Similar to before we create the full network search space, draw a GTN, simulate data and search for the optimal network.

<<pknextend2>>=
sifMatrix <- NULL
for (i in dnf) {
  inputs2 <- unique(unlist(strsplit(gsub("=.*", "", i), "=")))
  output <- unique(gsub(".*=", "", i))
  for (j in inputs2) {
    j2 <- gsub("!", "", j)
    if (j %in% j2) {
      sifMatrix <- rbind(sifMatrix, c(j, 1, output))
    } else {
      sifMatrix <- rbind(sifMatrix, c(j2, -1, output))
    }
  }
}
write.table(sifMatrix, file = "temp.sif", sep = "\t", row.names = FALSE, col.names = FALSE,
            quote = FALSE)
PKN <- readSIF("temp.sif")
## unlink("temp.sif")
CNOlist <- dummyCNOlist(stimuli = stimuli, inhibitors = inhibitors,
                        maxStim = 2, maxInhibit = 1, signals = NULL)
model <- preprocessing(CNOlist, PKN, maxInputsPerGate=100)
@
<<definegtn2>>=
bString <- absorption(sample(c(0,1), length(model$reacID), replace = T), model)
steadyState <- steadyState2 <- simulateStatesRecursive(CNOlist, model, bString)
ind <- grep(paste(inhibitors, collapse = "|"), colnames(steadyState2))
steadyState2[, ind] <- steadyState2[, ind] + CNOlist@inhibitors
while(any(apply(steadyState, 2, sd) == 0) | any(apply(steadyState2, 2, sd) == 0)) {
  bString <- absorption(sample(c(0,1), length(model$reacID), replace = T), model)
  steadyState <- steadyState2 <- simulateStatesRecursive(CNOlist, model, bString)
  ind <- grep(paste(inhibitors, collapse = "|"), colnames(steadyState2))
  steadyState2[, ind] <- steadyState2[, ind] + CNOlist@inhibitors
}
## we make sure the stimulations work:
bString[grep("stim", model$reacID)] <- 1
bString <- absorption(bString,model)
@
<<plotgtn2, fig.width=7, fig.height=6, out.width='0.6\\linewidth'>>=
plotDnf(model$reacID[as.logical(bString)], stimuli = stimuli)
@
<<datasim2>>=
exprs <- t(steadyState)[rep(1:ncol(steadyState), 10), rep(1:nrow(steadyState), 3)]
ERS <- computeFc(CNOlist, t(steadyState))
stmcomb <- apply(expand.grid(stimuli, stimuli), c(1,2), as.character)
stimuli.pairs <- apply(stimcomb, 1, paste, collapse = "_")
ind <- grep(paste(c(paste("Ctrl_vs_", c(stimuli, inhibitors), sep = ""),
                    paste(stimuli, "_vs_", stimuli, "_", rep(inhibitors, each = length(stimuli)), sep = ""),
                    paste(stimuli.pairs, "_vs_", stimuli.pairs, "_", rep(inhibitors, each = length(stimuli.pairs)), sep = "")),
                  collapse = "|"), colnames(ERS))
ERS <- ERS[, ind]
fc <- ERS[rep(1:nrow(ERS), 10), rep(1:ncol(ERS), 3)]
fc <- fc + rnorm(length(fc), 0, 1)
flip <- sample(1:nrow(fc), floor(0.33*row(fc)))
fc[flip, ] <- fc[flip, ]*(-1)
rownames(fc) <- paste(rownames(fc), 1:nrow(fc), sep = "_")
print(fc[1:6, c(1:3,(ncol(fc)-2):ncol(fc))])
@
<<localsearch2>>=
initBstring <- reduceGraph(rep(0, length(model$reacID)), model, CNOlist)
greedy2 <- bnem(search = "greedy",
            CNOlist=CNOlist,
            fc=fc,
            exprs=exprs,
            model=model,
            parallel=parallel,
            initBstring=initBstring,
            draw = FALSE,
            verbose = FALSE,
            maxSteps = Inf
            )
resString2 <- greedy2$bString
@
<<plotresult2, fig.width=7, fig.height=6, out.width='0.6\\linewidth'>>=
par(mfrow=c(1,2))
plotDnf(model$reacID[as.logical(bString)], main = "GTN", stimuli = stimuli)
plotDnf(model$reacID[as.logical(resString2)], main = "greedy optimum", stimuli = stimuli)
@
<<accuracy2>>=
print(sum(bString == 1 & resString2 == 1)/
      (sum(bString == 1 & resString2 == 1) + sum(bString == 1 & resString2 == 0)))
print(sum(bString == 0 & resString2 == 0)/
      (sum(bString == 0 & resString2 == 0) + sum(bString == 0 & resString2 == 1)))
ERS.res <- computeFc(CNOlist, t(simulateStatesRecursive(CNOlist, model, resString2)))
ERS.res <- ERS.res[, which(colnames(ERS.res) %in% colnames(ERS))]
print(sum(ERS.res == ERS)/length(ERS))
@
The greedy optimum looks different tfrom the GTN, even though they share a
lot, but not all edges (reduced sensitivity and specificity). However the accuracy of the ERS is still $100\%$.
<<sessioninfo>>=
sessionInfo()
@

\textbf{Method paper for B-NEM:}\\
Pirkl, Martin, Hand, Elisabeth, Kube, Dieter, \& Spang, Rainer. 2016. Analyzing synergistic and non-synergistic interactions in signalling pathways using Boolean Nested Effect Models. \textit{Bioinformatics}, 32(6), 893–900.

\end{document}
