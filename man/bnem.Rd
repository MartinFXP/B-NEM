% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.r
\name{bnem}
\alias{bnem}
\title{Boolean Nested Effects Model main function}
\usage{
bnem(search = "greedy", fc = NULL, exprs = NULL, egenes = NULL,
  pkn = NULL, design = NULL, stimuli = NULL, inhibitors = NULL,
  signals = NULL, CNOlist = NULL, model = NULL, sizeFac = 10^-10,
  NAFac = 1, parameters = list(cutOffs = c(0, 1, 0), scoring = c(0.1,
  0.2, 0.9)), parallel = NULL, method = "s", approach = "fc",
  relFit = FALSE, verbose = TRUE, reduce = TRUE, parallel2 = 1,
  initBstring = NULL, popSize = 100, pMutation = 0.5,
  maxTime = Inf, maxGens = Inf, stallGenMax = 10, relTol = 0.01,
  priorBitString = NULL, selPress = c(1.2, 1e-04), fit = "linear",
  targetBstring = "none", elitism = NULL, inversion = NULL,
  selection = c("t"), type = "SOCK", exhaustive = FALSE,
  delcyc = TRUE, seeds = 1, maxSteps = Inf, node = NULL,
  absorpII = TRUE, draw = TRUE, prior = NULL, maxInputsPerGate = 2,
  ...)
}
\arguments{
\item{search}{Type of search heuristic. Either "greedy", "genetic" or
"exhaustive". "greedy" uses a greedy algorithm to move through the local
neighbourhood of a initial hyper-graph. "genetic" uses a genetic algorithm.
"exhaustive" searches through the complete search space and is not
recommended.}

\item{fc}{Foldchanges of gene expression values or equivalent input
(normalized pvalues, logodds, ...). If left NULL, the gene expression
data is used to calculate naive foldchanges.}

\item{exprs}{Optional normalized gene expression data.}

\item{egenes}{list object. each list entry is named after an S-gene and
contains the egenes which are potential children}

\item{pkn}{Prior knowledge network.}

\item{design}{Optional design matrix for the gene expression values, if
available. If kept NULL, bnem needs either stimuli, inhibitors or a CNOlist
object.}

\item{stimuli}{Character vector of stimuli names.}

\item{inhibitors}{Character vector of inhibitors.}

\item{signals}{Optional character vector of signals. Signals are S-genes,
which can directly regulate E-genes. If left NULL, alls stimuli and
inhibitors are defined as signals.}

\item{CNOlist}{CNOlist object if available.}

\item{model}{Model object including the search space, if available.}

\item{sizeFac}{Size factor penelizing the hyper-graph size.}

\item{NAFac}{factor penelizing NAs in the data.}

\item{parameters}{atm not used}

\item{parallel}{Parallelize the search. An integer value specifies the
number of threads on the local machine. A list object as in list(c(1,2,3),
c("machine1", "machine2", "machine3")) specifies the threads distributed
on different machines (local or others).}

\item{method}{Scoring method can be a correlation, distance measure or a
probability based score "llr". See ?cor and ?dist for details.}

\item{approach}{atm not used}

\item{relFit}{atm not used}

\item{verbose}{TRUE gives additional information during the search.}

\item{reduce}{atm not used}

\item{parallel2}{atm not used}

\item{initBstring}{Binary string of the initial hyper-graph.}

\item{popSize}{Popultaion size (only "genetic").}

\item{pMutation}{Probability for mutation (only "genetic").}

\item{maxTime}{Define a maximal time for the search.}

\item{maxGens}{Maximal number of generations (only "genetic").}

\item{stallGenMax}{Maximum number of stall generations (only "genetic").}

\item{relTol}{Score tolerance for networks defined as optimal but with a
lower score as the real optimum (only "genetic").}

\item{priorBitString}{Binary string defining hyper-edges which are added
to every hyper-graph. E.g. if you know hyper-edge 55 is definitly there and
want to fix that set priorBitString[55] <- 1 (only "genetic").}

\item{selPress}{Selection pressure for the stochastic universal sampling
(only "genetic").}

\item{fit}{atm not used}

\item{targetBstring}{atmnot used}

\item{elitism}{Number of best hyper-graph transferred to the next generation
(only "genetic").}

\item{inversion}{Number of worst hyper-graphs for which their binary strings
are inversed  (only "genetic").}

\item{selection}{"t" for tournament selection and "s" for stochastic
universal sampling (only "genetic").}

\item{type}{atm not used}

\item{exhaustive}{If TRUE an exhaustive search is conducted if the genetic
algorithm would take longer (only "genetic").}

\item{delcyc}{If TRUE deleted cycles in all hyper-graphs (recommended).}

\item{seeds}{atm not used}

\item{maxSteps}{Maximal number of steps (only "greedy").}

\item{node}{atm not used}

\item{absorpII}{Use a thrid absorption law.}

\item{draw}{If TRUE draws the network evolution.}

\item{prior}{Binary vector. A 1 specifies hyper-edges which should not be
optimized (only "greedy").}

\item{maxInputsPerGate}{If no model is supplied, one is created with
maxInputsPerGate as maximum number of parents for each hyper-edge.}

\item{...}{additional low level parameters}
}
\value{
List object including the optimized hyper-graph and its
corresponding binary string.
}
\description{
This function takes a prior network and normalized perturbations as input and
trains logical function on that prior network
}
\examples{
library(CellNOptR)
sifMatrix <- rbind(c("A", 1, "B"), c("A", 1, "C"), c("B", 1, "D"),
c("C", 1, "D"))
write.table(sifMatrix, file = "temp.sif", sep = "\\t",
row.names = FALSE, col.names = FALSE,
quote = FALSE)
PKN <- readSIF("temp.sif")
unlink('temp.sif')
CNOlist <- dummyCNOlist("A", c("B","C","D"), maxStim = 1,
maxInhibit = 2, signals = c("A", "B","C","D"))
model <- preprocessing(CNOlist, PKN, maxInputsPerGate = 100)
exprs <- matrix(rnorm(nrow(slot(CNOlist, "cues"))*10), 10,
nrow(slot(CNOlist, "cues")))
fc <- computeFc(CNOlist, exprs)
initBstring <- rep(0, length(model$reacID))
res <- bnem(search = "greedy", model = model, CNOlist = CNOlist,
fc = fc, pkn = PKN, stimuli = "A", inhibitors = c("B","C","D"),
parallel = NULL, initBstring = initBstring, draw = FALSE, verbose = FALSE,
maxSteps = Inf)
}
\seealso{
nem
}
\author{
Martin Pirkl
}
